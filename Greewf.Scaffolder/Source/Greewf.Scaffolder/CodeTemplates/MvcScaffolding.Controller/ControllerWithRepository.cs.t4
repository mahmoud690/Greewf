<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Telerik.Web.Mvc;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
<# if(!string.IsNullOrEmpty(Model.ModelTypeNamespace)) { #>
using <#= Model.ModelTypeNamespace #>;
<# } #>
<# if(!string.IsNullOrEmpty(Model.ModelTypeNamespace)) { #>
using <#= Model.DefaultNamespace #>;
<# } #>
<# foreach(var ns in Model.DefaultImportingNamespaces) { #>
using <#= ns #>;
<# } #>

//TODO : 
// 1- complete the PermissionCordinator in order to support your limitter permissions (if any)
// 3- complete the GetModelLimiterFunctions method if required
// 4- modify ApplySearchCriteria method to satisfy your needs. 

namespace <#= Model.ControllerNamespace #>
{   
<#  
	var modelType = (CodeType)Model.ModelType; 
	var modelName = modelType.Name; 
	var modelNamePlural = Model.ModelTypePluralized; 
	var modelVariable = modelName.ToLower(); 
	var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
	var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);
	var routingName = Regex.Replace(Model.ControllerName, "Controller$", "", RegexOptions.IgnoreCase);
	var allProperties =  modelType.VisibleMembers().OfType<CodeProperty>();
	var propertiesToInclude = relatedEntities.Select(relation => relation.LazyLoadingProperty).Where(x => x != null);

#>
    public class <#= Model.ControllerName #> : CustomizedController< <#= modelName #>,<#= modelName #>ViewModel>
    {



	#region listing/filtering


        private IQueryable< <#= modelName #>> ApplySearchCriteria(IQueryable< <#= modelName #>> q, <#= modelName #>SearchCriteria criteria)
        {
            if (criteria != null)
            {
				//TODO : write filtering code or correct and uncomment the below codes
                <#    foreach(var prop in allProperties.Where (x => !propertiesToInclude.Contains(x)) ) { #>

                if (criteria.<#= prop.Name  #> != null)
                    q = q.Where(o => o.<#= prop.Name  #> == criteria.<#= prop.Name  #>);
                <#    } #> 
			}
            return q;
        }
		
        private IQueryable< <#= modelName #>GridViewModel> Get<#= modelNamePlural #>(<#= modelName #>SearchCriteria criteria = null)
        {

<#
	var includeExpression = String.Join(", ", propertiesToInclude.Select(x => String.Format("{0} => {0}.{1}", modelVariable, x.Name)));
	if (!string.IsNullOrEmpty(includeExpression)) {
		includeExpression = "Including(" + includeExpression + ")";
	}
	var allPropertyAssignments = String.Join(",\r\n ", allProperties.Select(x => String.Format("{0} = r.{0}", x.Name)));
	
#>			var q =
                from r in (<#= Repositories[modelType.FullName].VariableName #>.All<#= includeExpression #>)
                select r;

            //apply search criteria
            q = ApplySearchCriteria(q, criteria);

            return
                from r in q
                orderby r.<#= primaryKeyProperty.Name #>
                select new <#= modelName #>GridViewModel
                {
					<#= allPropertyAssignments #>
                };

        }
		
	#endregion 

	#region Index

        [Permissions(<#= modelName #>Permission.View)]
		public ViewResult Index()
        {
            return View(Get<#= modelNamePlural #>());
        }
		
    	[GridAction]
        [Permissions(<#= modelName #>Permission.View)]
        public ViewResult AjaxIndex()
        {
			var criteria = new <#= modelName #>SearchCriteria();
			UpdateModel(criteria, CustomHelper.SearchCriteriaPrefix);            
            return View(new GridModel(Get<#= modelNamePlural #>(criteria)));		
        }	
		
	#endregion

	#region Details

        [AutoMap(typeof(<#= modelName #>), typeof(<#= modelName #>ViewModel))]
        [Permissions(<#= modelName #>Permission.View)]
        public ViewResult Details(<#= primaryKeyProperty.Type.AsString #> id)
        {
            return View(<#= Repositories[modelType.FullName].VariableName #>.Find(id));
        }		
	#endregion

	#region Utilities

        private void PrepareViewBagLists(bool isCreateOrEdit)
        {
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
			ViewBag.Possible<#= relatedEntity.RelationNamePlural #> = <#= Repositories[relatedEntity.RelatedEntityType.FullName].VariableName #>.All;
<# } #>

   			if (isCreateOrEdit)
            {
				//TODO:move only create/edit specific viewbag items to here
			}
		}		

	#endregion

	#region Create

        [Permissions(<#= modelName #>Permission.Create)]
        public ActionResult Create()
        {
			var new<#= modelName #> = new <#= modelName #>ViewModel();
			PrepareViewBagLists(true);
            return View(new<#= modelName #>);
        } 

        [HttpPost]
        [AutoMap(typeof(<#= modelName #>), typeof(<#= modelName #>ViewModel))]
        [Permissions(<#= modelName #>Permission.Create)]
        [Log(LogPoint.<#= modelName #>Create, LogModelState.Valid, LogResultType.RedirectToSuccess)]
        public ActionResult Create(<#= modelName #>ViewModel <#= modelVariable #>Model)
        {
			var <#= modelVariable #> = <#= modelName #>ModelMapper.Map(<#= modelVariable #>Model);
			
            if (ModelState.IsValid) {
                <#= Repositories[modelType.FullName].VariableName #>.InsertOrUpdate(<#= modelVariable #>);
                <#= Repositories[modelType.FullName].VariableName #>.Save();
				
				return Redirect(Url.Action("edit", new { id = <#= modelVariable #>.<#= primaryKeyProperty.Name #> }), true, <#= modelName #>ModelMapper.Map(<#= modelVariable #>));
            } 
			else 
			{
				PrepareViewBagLists(true);
	            return View(<#= modelVariable #>);
			}
        }
        
	#endregion

	#region Edit

        [AutoMap(typeof(<#= modelName #>), typeof(<#= modelName #>ViewModel))]
        [Permissions(<#= modelName #>Permission.Edit)]
        public ActionResult Edit(<#= primaryKeyProperty.Type.AsString #> id)
        {
			PrepareViewBagLists(true);
			return View(<#= Repositories[modelType.FullName].VariableName #>.Find(id));
        }

        [HttpPost]
        [Permissions(<#= modelName #>Permission.Edit)]
        [Log(LogPoint.<#= modelName #>Edit, LogModelState.Valid, LogResultType.RedirectToSuccess)]
        public ActionResult Edit(<#= modelName #>ViewModel <#= modelVariable #>Model)
        {
            if (ModelState.IsValid) {
				var old<#= modelName #> = <#= Repositories[modelType.FullName].VariableName #>.Find(<#= modelVariable #>Model.<#= primaryKeyProperty.Name #>);
				UpdateModel(old<#= modelName #>);
                <#= Repositories[modelType.FullName].VariableName #>.InsertOrUpdate(old<#= modelName #>);
                <#= Repositories[modelType.FullName].VariableName #>.Save();
				return Redirect(Url.Action("edit"), true, <#= modelName #>ModelMapper.Map(old<#= modelName #>));

            } else {
				PrepareViewBagLists(true);
	            return View(<#= modelVariable #>Model);
			}
        }

	#endregion

	#region Delete

        [AutoMap(typeof(<#= modelName #>), typeof(<#= modelName #>ViewModel))]
        [Permissions(<#= modelName #>Permission.Delete)]
        public ActionResult Delete(<#= primaryKeyProperty.Type.AsString #> id)
        {
            var deletingItem = <#= Repositories[modelType.FullName].VariableName #>.Find(id);

            if (DeletingCoditionsMet(deletingItem))
                return View(deletingItem);
            else
                return View("DeleteError", deletingItem);
        }

        [HttpPost, ActionName("Delete")]
        [Permissions(<#= modelName #>Permission.Delete)]
        [Log(LogPoint.<#= modelName #>Delete, LogModelState.Always, LogResultType.Always)]
        public ActionResult DeleteConfirmed(<#= primaryKeyProperty.Type.AsString #> id)
        {
            var deletingItem = <#= Repositories[modelType.FullName].VariableName #>.Find(id);
            var <#= modelVariable #>Model = <#= modelName #>ModelMapper.Map(deletingItem);

            if (DeletingCoditionsMet(deletingItem))
            {
                <#= Repositories[modelType.FullName].VariableName #>.Delete(id);
                <#= Repositories[modelType.FullName].VariableName #>.Save(); 

                return RedirectToSuccessAction(<#= modelVariable #>Model);        
            }
            else
                return View("DeleteError", <#= modelVariable #>Model);
        }

        private bool DeletingCoditionsMet(<#= modelName #> deletingItem)
        {
            // follow the following pattern :
            //int relatedCount = deletingItem.RelatedItems.Count;
            //if (relatedCount > 0)
            //    ModelState.AddModelError("", string.Format("وجود {0} آیتم مرتبط", relatedCount));

            return ModelState.IsValid;
        }

		
	#endregion

	#region Search

        [Permissions(<#= modelName #>Permission.View)]
        public ActionResult Search()
        {
            PrepareViewBagLists(false);
            return View();
        }

        [HttpPost]
        [Permissions(<#= modelName #>Permission.View)]
        public ActionResult Search(<#= modelName #>SearchCriteria criteria)
        {
            PrepareViewBagLists(false);
            ViewBag.SearchResult = Get<#= modelNamePlural #>(criteria);

            return View(criteria);
        }

	#endregion	

	#region ModelMapper

        public IMapper< <#= modelName #>, <#= modelName #>ViewModel> <#= modelName #>ModelMapper
        {
            get
            {
                return EntityModelMapper;
            }
        }

	#endregion

	#region Permission Handling

        protected override ModelPermissionLimiters GetModelLimiterFunctions(dynamic model)
        {
            //TODO : uncomment and correct these if you have permission based on the entity creator or any other rules
			//if (model is <#= modelName #>ViewModel)
            //    return new ModelPermissionLimiters()
            //    {
            //        OrBase = true,
            //        LimiterFunctions = new PermissionLimiterBase[1] { 
			//				new PermissionLimiter()
			//				.ForOwnsPermissionsOf(PermissionEntity.<#=modelNamePlural#>)
			//				.MakeLimitsBy(() => (model as <#= modelName #>ViewModel).UserName == Commons.CurrentUser.UserName)
            //        }                                                      
            //    };
            return null;
        }
	
	#endregion

	#region Log Details Handling

        protected override Dictionary<string, string> GetLogDetails(int logPointId, dynamic model)
        {
            return null;
        }

	#endregion

    }	

}

<#+
class RepositoryInfo {
    public string RepositoryTypeName { get; set; }
    public string VariableName { get; set; }
}

IDictionary<string, RepositoryInfo> _repositories;
IDictionary<string, RepositoryInfo> Repositories {
	get {
		if (_repositories == null) {
			var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
			var relatedTypes = relatedEntities.Where(x => x.RelationType == RelationType.Parent).Select(x => x.RelatedEntityType).Distinct();
			_repositories = relatedTypes.ToDictionary(
				relatedType => relatedType.FullName,
				relatedType => new RepositoryInfo { RepositoryTypeName = relatedType.Name + "Repository", VariableName = relatedType.Name + "Repository" }
			); 
			_repositories[((CodeType)Model.ModelType).FullName] = new RepositoryInfo { RepositoryTypeName = Model.Repository, VariableName = ((CodeType)Model.ModelType).Name + "Repository" };
		}
		return _repositories;
	}
}

#>