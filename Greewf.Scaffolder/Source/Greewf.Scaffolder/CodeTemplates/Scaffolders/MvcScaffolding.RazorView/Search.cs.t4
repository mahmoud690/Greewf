<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output extension="cshtml" encoding="UTF8"#>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<# var viewDataType = (EnvDTE.CodeType) Model.ViewDataType; #>
<# var modelDataType = (EnvDTE.CodeType) Model.ModelType; #>

<# if(viewDataType != null) { #>
@model <#= viewDataType.FullName #>
<# } #>
@{
    ViewBag.PageTitle = "جستجوی <#= GetDisplayName(modelDataType) #>";
    string fldstId = "fldst" + (new Random()).Next().ToString();
<#
if (!String.IsNullOrEmpty(Model.Layout)) {
#>
    Layout = "<#= Model.Layout #>";
<#
}
#>
}

<# if(Model.ReferenceScriptLibraries) { #>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

<# } #>
<script type="text/javascript">
    layoutHelper.handleAutoSubmit('@(fldstId)');
</script>
@if (! Request.QueryString.AllKeys.Contains ("isCurrentPageCallBack"))
{
    using (Ajax.BeginForm("search", new { puremode = 1 , isCurrentPageCallBack = 1 }, new string[] { "simplemode" }, new Greewf.BaseLibrary.MVC.Ajax.CustomizedAjaxOption("searchResult"+ fldstId, "bigprogress-icon t-content")))
    {    
    <fieldset id='@(fldstId)'>
        <legend>جستجوی <#= GetDisplayName(modelDataType) #>...</legend>
		@Html.Partial("_SearchCriteria", Model)
        <p>
			<button class="t-button" type="submit" name="doSearch" value="true"><span class="icon16 xmag-png"></span> جستجو <#= GetDisplayName(modelDataType) #>...</button><br />
        </p>
    </fieldset>
    }
}
<div id="searchResult@(fldstId)">
    @{var result = ViewBag.SearchGridModelResult == null ? null : ViewBag.SearchGridModelResult.Data as IEnumerable<object>;}    
    @if (result != null && result.Count() > 0)
	{
        if (Request.QueryString.AllKeys.Contains("briefview"))
        {
            @Html.Partial("_ListBreifView",ViewBag.SearchGridModelResult as object)
        }
        else
        { 
		    @Html.Partial("_List",  ViewBag.SearchGridModelResult as object)<# /*Model.ModelTypePluralized*/ #>
        }
	}
   else if (result != null)
   { 
	   <script language="javascript" type="text/javascript">
	       $().ready(function () {
                @if (Request.QueryString.AllKeys.Contains("briefview"))
                {
                    @:$('#searchResult@(fldstId)').html('<center style="color:red;font-weight:bolder;background-color:yellow"><span class="icon16 alert-gif"></span><#= GetDisplayName(modelDataType) #>  مورد نظر پیدا نشد</center>');    
                }
                else
                {
                    @:layoutHelper.core.showWarningMessage('<#= GetDisplayName(modelDataType) #>  پیدا نشد!', 'جستجوی <#= GetDisplayName(modelDataType) #>');
                }
	       });
	   </script>       
   }
</div>


<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string ValueExpression { get; set; }
	public EnvDTE.CodeTypeRef Type { get; set; }
    public bool IsPrimaryKey { get; set; }
	public bool IsForeignKey { get; set; }
	public bool IsReadOnly { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible to be edited using a textbox
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = GetEligibleProperties(typeInfo, includeUnbindableProperties);
    
    foreach (ModelProperty prop in results) {
        if (prop.Type.UnderlyingTypeIs<double>() || prop.Type.UnderlyingTypeIs<decimal>()) {
            prop.ValueExpression = "String.Format(\"{0:F}\", " + prop.ValueExpression + ")";
        }
        else if (prop.Type.UnderlyingTypeIs<DateTime>()) {
            prop.ValueExpression = "String.Format(\"{0:g}\", " + prop.ValueExpression + ")";
        }
		else if (!IsBindableType(prop.Type)) {
			prop.ValueExpression = GetValueExpression("Model." + prop.Name, (EnvDTE.CodeType)prop.Type.CodeType);
		}
    }

    return results;
}

// Change this list to include the names of properties that should be selected to represent an entity as a single string
static string[] displayPropertyNames = new[] { "Name", "Title", "LastName", "Surname", "Subject", "Count" };

string GetValueExpression(string propertyExpression, EnvDTE.CodeType propertyType) {
	if (propertyType != null) {
		var chosenSubproperty = propertyType.DisplayColumnProperty() ?? propertyType.FindProperty(displayPropertyNames);
		if (chosenSubproperty != null) {
			var toStringSuffix = chosenSubproperty.Type.AsFullName == "System.String" ? "" : ".ToString()";
			return String.Format("({0} == null ? \"None\" : {0}.{1}{2})", propertyExpression, chosenSubproperty.Name, toStringSuffix);
		}
	}
	return "Html.DisplayTextFor(_ => " + propertyExpression + ").ToString()";
}

// Helper
List<ModelProperty> GetEligibleProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = new List<ModelProperty>();
	if (typeInfo != null) {
		foreach (var prop in typeInfo.VisibleMembers().OfType<EnvDTE.CodeProperty>()) {
			if (prop.IsReadable() && !prop.HasIndexParameters() && (includeUnbindableProperties || IsBindableType(prop.Type))) {
				results.Add(new ModelProperty {
					Name = prop.Name,
					ValueExpression = "Model." + prop.Name,
					Type = prop.Type,
					IsPrimaryKey = Model.PrimaryKeyName == prop.Name,
					IsForeignKey = ParentRelations.Any(x => x.RelationProperty == prop),
					IsReadOnly = !prop.IsWriteable()
				});
			}
		}
	}

    return results;
}

IEnumerable<RelatedEntityInfo> ParentRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Parent); }
}

// Helper
bool IsBindableType(EnvDTE.CodeTypeRef type) {
    return type.UnderlyingIsPrimitive() || bindableNonPrimitiveTypes.Any(x => type.UnderlyingTypeIs(x));
}

string GetDisplayName(EnvDTE.CodeType type){
	if (string.IsNullOrWhiteSpace(type.DocComment))
		return type.Name;
	return GetCleanDocument(type.DocComment);
}
string GetCleanDocument(string doc)
{	
	return 
		doc
		.Replace("<doc>","")
		.Replace("</doc>","")
		.Replace("<summary>","")
		.Replace("</summary>","")
		.Replace("\r","")
		.Replace("\n","")
		.Replace(@"///","")
		.Trim();
}
#>