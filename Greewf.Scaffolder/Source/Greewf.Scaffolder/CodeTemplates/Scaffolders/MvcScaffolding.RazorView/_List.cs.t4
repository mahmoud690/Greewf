<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output extension="cshtml" encoding="UTF8" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="EnvDTE" #>
<# var viewDataType = (EnvDTE.CodeType) Model.ViewDataType; #>
<# var viewDetailsDataType = (EnvDTE.CodeType) Model.ViewDetailsDataType; #>
<# var modelDataType = (EnvDTE.CodeType) Model.ModelType; #>
<# string OPENBRACE= "<"; #>
<# string CLOSEBRACE = ">"; #>
<# var entityDataType = (EnvDTE.CodeType) Model.ModelType; #>
<# if(viewDataType != null) { #>
@model <#= viewDataType.FullName #>
<# } #>
<script type="text/javascript" language="javascript">
    function Grid<#=Model.ModelTypePluralized#>_selected(e) {

        var <#=modelDataType.Name#>Details = $('#<#=modelDataType.Name#>Details');
        if (<#=modelDataType.Name#>Details.length == 0) return;
        <#=modelDataType.Name#>Id = e.row.cells[0+$('#Grid<#=Model.ModelTypePluralized#>').data('tGrid').groups.length].innerHTML;

        jsHelper.loadAjax('@Url.Action("Details/puremode", "<#= Model.ModelTypePluralized #>")/' + <#=modelDataType.Name#>Id, <#=modelDataType.Name#>Details, true, true);
    }

    function <#=Model.ModelTypePluralized#>GridCallBack(sender, data, isSuccessfulFlagUp) {
        if (isSuccessfulFlagUp)
            window.$('#Grid<#= Model.ModelTypePluralized #>').data('tGrid').ajaxRequest();
    }
  
</script>
@(Html.Telerik().Grid(Model.Data)
        .Name("Grid<#= Model.ModelTypePluralized #>")
		.DataKeys(keys =>
		{
		   keys.Add(c => c.<#= Model.PrimaryKeyName #>);
		})
        .Localizable("fa-IR")
		.Columns(columns =>
		{
			columns.Bound(o => o.<#= Model.PrimaryKeyName #>).Hidden(true);
<#
List<ModelProperty> properties = GetModelProperties(Model.viewDetailsDataType, true);
foreach (ModelProperty property in properties) {
    if (!property.IsPrimaryKey && !property.IsForeignKey) {
#>
			columns.Bound(o => o.<#= property.Name #>);
<#
    }
}
#>
		  	columns.Template(@<text> <a class="t-button t-grid-edit t-button-icon at-rowEdit" href='@Url.Action("edit", "<#= Model.ModelTypePluralized #>", new { item.<#= Model.PrimaryKeyName #> })' title='ویرایش اطلاعات <#= GetDisplayName(modelDataType) #> "@item.<#= GetModelTitleProperty(modelDataType) #>"' newwindow='True' ajax='1' windowcallback='<#=Model.ModelTypePluralized#>GridCallBack'>
		    	<span class="t-icon t-edit"></span></a></text>)
				.ClientTemplate("<a class='t-button t-grid-edit t-button-icon at-rowEdit' href='" + Url.Action("edit", "<#= Model.ModelTypePluralized #>") + "/<#= OPENBRACE #>#=<#= Model.PrimaryKeyName#>#<#=CLOSEBRACE #>' title='ویرایش اطلاعات <#= GetDisplayName(modelDataType) #> <#= OPENBRACE #>#=<#= GetModelTitleProperty(modelDataType)#>#<#=CLOSEBRACE #>' newwindow='true' ajax='1' windowcallback='<#=Model.ModelTypePluralized#>GridCallBack'><span class='t-icon t-edit'></span></a>")
	            .Visible(Commons.CurrentUser.HasPermission<<#=modelDataType.Name#>Permission>(<#=modelDataType.Name#>Permission.Edit) && Model.Editable)
				.Width(20);
		  	columns.Template(@<text> <a class="t-button t-grid-delete t-button-icon at-rowDelete" href='@Url.Action("delete", "<#= Model.ModelTypePluralized #>", new { item.<#= Model.PrimaryKeyName #> })' title='حذف اطلاعات <#= GetDisplayName(modelDataType) #> "@item.<#= GetModelTitleProperty(modelDataType) #>"' newwindow='True' ajax='1' windowcallback='<#=Model.ModelTypePluralized#>GridCallBack'>
		    	<span class="t-icon t-delete"></span></a></text>)
				.ClientTemplate("<a class='t-button t-grid-delete t-button-icon at-rowDelete' href='" + Url.Action("delete", "<#= Model.ModelTypePluralized #>") + "/<#= OPENBRACE #>#=<#= Model.PrimaryKeyName#>#<#=CLOSEBRACE #>' title='حذف اطلاعات <#= GetDisplayName(modelDataType) #> <#= OPENBRACE #>#=<#= GetModelTitleProperty(modelDataType)#>#<#=CLOSEBRACE #>' newwindow='true' ajax='1'  windowcallback='<#=Model.ModelTypePluralized#>GridCallBack'><span class='t-icon t-delete'></span></a>")
	            .Visible(Commons.CurrentUser.HasPermission<<#=modelDataType.Name#>Permission>(<#=modelDataType.Name#>Permission.Delete) && Model.Editable)
				.Width(20);
		})
        .DataBinding(dataBinding =>
        {
            dataBinding.Server()
                .Select(Model.AjaxSelectAction, "<#= Model.ModelTypePluralized #>",Html.AppendSearchCriteria(Model.IsInSearchMode, new { ajax = true }));

            dataBinding.Ajax()
                .Select(Model.AjaxSelectAction, "<#= Model.ModelTypePluralized #>", Html.AppendSearchCriteria(Model.IsInSearchMode)).Enabled(true);
        })
        .ToolBar(commands =>
        {
            commands.Template(@<text><a class="t-button t-grid-add t-button-icon at-rowEdit" style="display:@(Commons.CurrentUser.HasPermission<<#=modelDataType.Name#>Permission>(<#=modelDataType.Name#>Permission.Create) ? "" : "none")"
                href='@Url.Action("create", "<#= Model.ModelTypePluralized #>")' title='<#=GetDisplayName(modelDataType)#> جدید' newwindow='true' ajax='1' windowcallback='<#=Model.ModelTypePluralized#>GridCallBack'><span
                    class="t-icon t-add"></span>اضافه کردن <#=GetDisplayName(modelDataType)#> جدید</a></text>);
        })
        .Scrollable(scrolling => { scrolling.Enabled(false); scrolling.Height("400%"); })
        .Sortable(sorting => sorting.Enabled(true).OrderBy(ordering =>
        {
            ordering.Add(c => c.<#= Model.PrimaryKeyName #>);
        }))
        .Pageable(paging => paging.Enabled(true).PageSize(10))
        .Filterable(filtering => filtering.Enabled(true))
        .Groupable(grouping => grouping.Enabled(true))
        .Selectable()
        .ClientEvents(o => o.OnRowSelect("Grid<#=Model.ModelTypePluralized#>_selected"))
        .Footer(true)


)
<br />


<#+
/*
																	!!!!!!!!!!!!!!NOTE!!!!!!!!!!! : 
																	!!!!!!!!!!!!!!NOTE!!!!!!!!!!! : 
			becuase of the problem which is mentioned in "http://mvcscaffolding.codeplex.com/workitem/36" I should disable "prop.IsReadable()" code 
																	!!!!!!!!!!!!!!NOTE!!!!!!!!!!! : 
																	!!!!!!!!!!!!!!NOTE!!!!!!!!!!! : 
*/
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string ValueExpression { get; set; }
	public EnvDTE.CodeTypeRef Type { get; set; }
    public bool IsPrimaryKey { get; set; }
	public bool IsForeignKey { get; set; }
	public bool IsReadOnly { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible to be edited using a textbox
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = GetEligibleProperties(typeInfo, includeUnbindableProperties);
    
    foreach (ModelProperty prop in results) {
        if (prop.Type.UnderlyingTypeIs<double>() || prop.Type.UnderlyingTypeIs<decimal>()) {
            prop.ValueExpression = "String.Format(\"{0:F}\", " + prop.ValueExpression + ")";
        }
        else if (prop.Type.UnderlyingTypeIs<DateTime>()) {
            prop.ValueExpression = "String.Format(\"{0:g}\", " + prop.ValueExpression + ")";
        }
		else if (!IsBindableType(prop.Type)) {
			prop.ValueExpression = GetValueExpression("Model." + prop.Name, (EnvDTE.CodeType)prop.Type.CodeType);
		}
    }

    return results;
}

// Change this list to include the names of properties that should be selected to represent an entity as a single string
static string[] displayPropertyNames = new[] { "Name", "Title", "LastName", "Surname", "Subject", "Count" };

string GetValueExpression(string propertyExpression, EnvDTE.CodeType propertyType) {
	if (propertyType != null) {
		var chosenSubproperty = propertyType.DisplayColumnProperty() ?? propertyType.FindProperty(displayPropertyNames);
		if (chosenSubproperty != null) {
			var toStringSuffix = chosenSubproperty.Type.AsFullName == "System.String" ? "" : ".ToString()";
			return String.Format("({0} == null ? \"None\" : {0}.{1}{2})", propertyExpression, chosenSubproperty.Name, toStringSuffix);
		}
	}
	return "Html.DisplayTextFor(_ => " + propertyExpression + ").ToString()";
}

// Helper
List<ModelProperty> GetEligibleProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = new List<ModelProperty>();
	if (typeInfo != null) {
		foreach (var prop in typeInfo.VisibleMembers().OfType<EnvDTE.CodeProperty>()) {
			if (/*prop.IsReadable() && BY Mahmoud Moravej */ !prop.HasIndexParameters() && (includeUnbindableProperties || IsBindableType(prop.Type))) {
				results.Add(new ModelProperty {
					Name = prop.Name,
					ValueExpression = "Model." + prop.Name,
					Type = prop.Type,
					IsPrimaryKey = Model.PrimaryKeyName == prop.Name,
					IsForeignKey = ParentRelations.Any(x => x.RelationProperty == prop),
					IsReadOnly = false//!prop.IsWriteable() BY Mahmoud Moravej
				});
			}
		}
	}

    return results;
}

IEnumerable<RelatedEntityInfo> ParentRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Parent); }
}

// Helper
bool IsBindableType(EnvDTE.CodeTypeRef type) {
    return type.UnderlyingIsPrimitive() || bindableNonPrimitiveTypes.Any(x => type.UnderlyingTypeIs(x));
}


string GetDisplayName(EnvDTE.CodeType type){
	if (string.IsNullOrWhiteSpace(type.DocComment))
		return type.Name;
	return GetCleanDocument(type.DocComment);
}
string GetCleanDocument(string doc)
{	
	return 
		doc
		.Replace("<doc>","")
		.Replace("</doc>","")
		.Replace("<summary>","")
		.Replace("</summary>","")
		.Replace("\r","")
		.Replace("\n","")
		.Replace(@"///","")
		.Trim();
}
static string[] titlePropertyNames = new[] { "Name", "Title", "LastName","Lastname", "Surname", "Subject", "Count" };
string GetModelTitleProperty(EnvDTE.CodeType modelType) {
	if (modelType != null) {
		var chosenSubproperty = modelType.FindProperty(titlePropertyNames);
		if (chosenSubproperty != null) {
			return chosenSubproperty.Name;
		}
	}
	return Model.PrimaryKeyName;
}
#>