<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output extension="cshtml" encoding="UTF8" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<# var viewDataType = (EnvDTE.CodeType) Model.ViewDataType; #>
<# var modelDataType = (EnvDTE.CodeType) Model.ModelType; #>

<# if(viewDataType != null) { #>
@model <#= viewDataType.FullName #>
<# } #>
@{
    ViewBag.PageTitle = String.Format("نمایش اطلاعات {0} {1}","<#= GetDisplayName(modelDataType) #>",Model.<#= GetModelTitleProperty(modelDataType) #>);
<#
if (!String.IsNullOrEmpty(Model.Layout)) {
#>
    Layout = "<#= Model.Layout #>";
<#
}
#>
}
<fieldset>
    <legend>@String.Format("نمایش اطلاعات {0} {1}","<#= GetDisplayName(modelDataType) #>",Model.<#= GetModelTitleProperty(modelDataType) #>)</legend>
    @Html.Partial("_Details")
</fieldset>
<#+ 

string GetDisplayName(EnvDTE.CodeType type){
	if (string.IsNullOrWhiteSpace(type.DocComment))
		return type.Name;
	return GetCleanDocument(type.DocComment);
}
string GetCleanDocument(string doc)
{	
	return 
		doc
		.Replace("<doc>","")
		.Replace("</doc>","")
		.Replace("<summary>","")
		.Replace("</summary>","")
		.Replace("\r","")
		.Replace("\n","")
		.Replace(@"///","")
		.Trim();
}
static string[] titlePropertyNames = new[] { "Name", "Title", "LastName","Lastname", "Surname", "Subject", "Count" };
string GetModelTitleProperty(EnvDTE.CodeType modelType) {
	if (modelType != null) {
		var chosenSubproperty = modelType.FindProperty(titlePropertyNames);
		if (chosenSubproperty != null) {
			return chosenSubproperty.Name;
		}
	}
	return Model.PrimaryKeyName;
}

#>