<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
<# 
    var modelType = (CodeType)Model.ModelType; 
    var modelName = modelType.Name; 
    var modelNamePlural = Model.ModelTypePluralized; 
    var contextName = ((CodeType)Model.DbContextType).Name; 
    var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);
#>
		    //<#= modelName #>Permission
		    relatedPermissions.Add(new RelatedPermission(PermissionEntity.<#= modelNamePlural #>, (long)<#= modelName #>Permission.EditOwn, (long)<#= modelName #>Permission.EditFull));
		    relatedPermissions.Add(new RelatedPermission(PermissionEntity.<#= modelNamePlural #>, (long)<#= modelName #>Permission.DeleteOwn, (long)<#= modelName #>Permission.DeleteFull));
		    relatedPermissions.Add(new RelatedPermission(PermissionEntity.<#= modelNamePlural #>, (long)<#= modelName #>Permission.ViewOwn, (long)<#= modelName #>Permission.ViewFull));
			enumMaps.Add(typeof(<#= modelName #>Permission), PermissionEntity.<#= modelNamePlural #>);
			ownPermissionsList.Add(PermissionEntity.<#= modelNamePlural #>, (long)(<#= modelName #>Permission.ViewOwn | <#= modelName #>Permission.EditOwn | <#= modelName #>Permission.DeleteOwn));
			
			