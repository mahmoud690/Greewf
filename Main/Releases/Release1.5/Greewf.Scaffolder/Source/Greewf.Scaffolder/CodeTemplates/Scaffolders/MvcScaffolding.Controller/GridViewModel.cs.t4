<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
using System.ComponentModel.DataAnnotations;
<# if(!string.IsNullOrEmpty(Model.ModelTypeNamespace)) { #>
using <#= Model.ModelTypeNamespace #>;
<# } #>
using Greewf.BaseLibrary.MVC;

namespace <#= Model.ViewModelNameSpace #>
{   
<# 
    var modelType = (CodeType)Model.ModelType; 
    var modelName = modelType.Name; 
    var modelNamePlural = Model.ModelTypePluralized; 
    var contextName = ((CodeType)Model.DbContextType).Name; 
    var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);
	var allProperties =  modelType.VisibleMembers().OfType<CodeProperty>();
#>

    public class <#= modelName #>GridViewModel : GridViewModelBase<<#= modelName #>GridRowViewModel>
    {   
    }

 
	public class <#= modelName #>GridRowViewModel 
    {
	
<# foreach(var prop in allProperties) { #>
		[Display(Name = "<#= GetDisplayName(prop) #>")]		 
        public  <#=prop.Type.AsString  #>  <#=prop.Name #>{ get; set; }	
		
<# } #> 
    }

}
<#+
string GetDisplayName(CodeProperty prop){
	if (string.IsNullOrWhiteSpace(prop.DocComment))
		return prop.Name;
	return GetCleanDocument(prop.DocComment);
}
string GetCleanDocument(string doc)
{	
	return 
		doc
		.Replace("<doc>","")
		.Replace("</doc>","")
		.Replace("<summary>","")
		.Replace("</summary>","")
		.Replace("\r","")
		.Replace("\n","")
		.Replace(@"///","")
		.Trim();
}

#>
